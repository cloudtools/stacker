import logging
import os

from botocore.exceptions import ClientError

from stacker.session_cache import get_session
from . import utils


logger = logging.getLogger(__name__)

KEYPAIR_LOG_MESSAGE = "keypair: %s (%s) %s"


def find(lst, key, value):
    for i, dic in enumerate(lst):
        if dic[key] == value:
            return lst[i]
    return False


def create_key_pair(client, keypair_name):
    keypair = client.create_key_pair(KeyName=keypair_name, DryRun=False)
    logger.info(KEYPAIR_LOG_MESSAGE,
                keypair["KeyName"],
                keypair["KeyFingerprint"],
                "created")
    return keypair


def ensure_keypair_exists(provider, context, **kwargs):
    """Ensure a specific keypair exists within AWS.

    If the key doesn't exist, upload it.

    Args:
        provider (:class:`stacker.providers.base.BaseProvider`): provider
            instance
        context (:class:`stacker.context.Context`): context instance
        keypair (:class:` str'): name of the key pair to create
        ssm_parameter_name (:class:`str`): optional path to an SSM store
            parameter to receive the generated private key, instead of
            importing it or storing it locally.
        ssm_key_id (:class:`str`): optional ID of a KMS key to encrypt the SSM
            parameter with. If ommitted, the default key will be used.

    Returns: boolean for whether or not the hook succeeded.
    """

    keypair_name = kwargs["keypair"]
    ssm_parameter_name = kwargs.get("ssm_parameter_name")
    ssm_key_id = kwargs.get("ssm_key_id")

    session = get_session(provider.region)
    client = session.client("ec2")

    resp = client.describe_key_pairs()
    keypair = find(resp["KeyPairs"], "KeyName", keypair_name)

    if keypair:
        logger.info(KEYPAIR_LOG_MESSAGE,
                    keypair["KeyName"],
                    keypair["KeyFingerprint"],
                    "exists")
        return {
            "status": "exists",
            "key_name": keypair["KeyName"],
            "fingerprint": keypair["KeyFingerprint"],
        }

    logger.info("keypair: \"%s\" not found", keypair_name)
    if ssm_parameter_name:
        ssm_client = session.client("ssm")
        keypair = create_key_pair(client, keypair_name)
        try:
            if ssm_key_id:
                ssm_key_name = ssm_key_id
                key_id_args = {"KeyId": ssm_key_id}
            else:
                ssm_key_name = 'default'
                key_id_args = {}

            logger.info("Storing generated key in SSM parameter \"%s\" "
                        "using KMS key \"%s\"", ssm_parameter_name,
                        ssm_key_name)

            ssm_client.put_parameter(
                Name=ssm_parameter_name,
                Description="SSH private key for KeyPair \"{}\" "
                            "(generated by Stacker)".format(keypair_name),
                Value=keypair["KeyMaterial"],
                Type="SecureString",
                Overwrite=False,
                **key_id_args)
        except ClientError as client_error:
            # Erase the key pair if we failed to store it in SSM, since the
            # private key will be lost anyway

            logger.exception("Failed to store generated key in SSM, deleting "
                             "created key pair as private key will be lost")
            client.delete_key_pair(KeyName=keypair_name, DryRun=False)
            return False

        return {
            "status": "created",
            "key_name": keypair["KeyName"],
            "fingerprint": keypair["KeyFingerprint"],
        }
    else:
        create_or_upload = raw_input(
            "import or create keypair \"%s\"? (import/create/Cancel) " % (
                keypair_name,
            ),
        )
        if create_or_upload == "import":
            path = raw_input("path to keypair file: ")
            full_path = utils.full_path(path)
            if not os.path.exists(full_path):
                logger.error("Failed to find keypair at path: %s", full_path)
                return False

            with open(full_path) as read_file:
                contents = read_file.read()

            keypair = client.import_key_pair(KeyName=keypair_name,
                                             PublicKeyMaterial=contents)
            logger.info(KEYPAIR_LOG_MESSAGE,
                        keypair["KeyName"],
                        keypair["KeyFingerprint"],
                        "imported")
            return {
                "status": "imported",
                "key_name": keypair["KeyName"],
                "fingerprint": keypair["KeyFingerprint"],
                "file_path": full_path,
            }
        elif create_or_upload == "create":
            path = raw_input("directory to save keyfile: ")
            full_path = utils.full_path(path)
            if not os.path.exists(full_path) and not os.path.isdir(full_path):
                logger.error("\"%s\" is not a valid directory", full_path)
                return False

            file_name = "{0}.pem".format(keypair_name)
            if os.path.isfile(os.path.join(full_path, file_name)):
                # This mimics the old boto2 keypair.save error
                logger.error("\"%s\" already exists in \"%s\" directory",
                             file_name,
                             full_path)
                return False

            keypair = create_key_pair(client, keypair_name)
            with open(os.path.join(full_path, file_name), "w") as f:
                f.write(keypair["KeyMaterial"])

            return {
                "status": "created",
                "key_name": keypair["KeyName"],
                "fingerprint": keypair["KeyFingerprint"],
                "file_path": os.path.join(full_path, file_name)
            }
        else:
            logger.warning("no action to find keypair, failing")
            return False

